<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="5285"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0189%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0189%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0189%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0189%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>rustaceans_brc_week2`std::sys::pal::unix::thread_local_dtor::register_dtor::run_dtors (1 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0189%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>rustaceans_brc_week2`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0189%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0189%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0189%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>libobjc.A.dylib`initializeAndMaybeRelock(objc_class*, objc_object*, locker_mixin&lt;lockdebug::lock_mixin (1 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0189%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.02%)</title><rect x="0.0000%" y="181" width="0.0189%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>libobjc.A.dylib`_objc_sync_enter_kind (1 samples, 0.02%)</title><rect x="0.0000%" y="165" width="0.0189%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>libobjc.A.dylib`id2data(objc_object*, SyncKind, usage) (1 samples, 0.02%)</title><rect x="0.0000%" y="149" width="0.0189%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_type_posix_memalign (1 samples, 0.02%)</title><rect x="0.0000%" y="133" width="0.0189%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.02%)</title><rect x="0.0000%" y="117" width="0.0189%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.0000%" y="101" width="0.0189%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>rustaceans_brc_week2`alloc::vec::Vec&lt;T,A&gt;::truncate (28 samples, 0.53%)</title><rect x="0.0189%" y="229" width="0.5298%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="28"/><text x="0.2689%" y="239.50"></text></g><g><title>rustaceans_brc_week2`alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="1.2677%" y="213" width="0.0189%" height="15" fill="rgb(225,20,46)" fg:x="67" fg:w="1"/><text x="1.5177%" y="223.50"></text></g><g><title>rustaceans_brc_week2`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="1.2677%" y="197" width="0.0189%" height="15" fill="rgb(210,31,41)" fg:x="67" fg:w="1"/><text x="1.5177%" y="207.50"></text></g><g><title>rustaceans_brc_week2`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="1.2677%" y="181" width="0.0189%" height="15" fill="rgb(221,200,47)" fg:x="67" fg:w="1"/><text x="1.5177%" y="191.50"></text></g><g><title>rustaceans_brc_week2`alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="1.2677%" y="165" width="0.0189%" height="15" fill="rgb(226,26,5)" fg:x="67" fg:w="1"/><text x="1.5177%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="1.2677%" y="149" width="0.0189%" height="15" fill="rgb(249,33,26)" fg:x="67" fg:w="1"/><text x="1.5177%" y="159.50"></text></g><g><title>rustaceans_brc_week2`core::f32::_&lt;impl f32&gt;::max (4 samples, 0.08%)</title><rect x="1.2867%" y="213" width="0.0757%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="4"/><text x="1.5367%" y="223.50"></text></g><g><title>rustaceans_brc_week2`core::f32::_&lt;impl f32&gt;::min (5 samples, 0.09%)</title><rect x="1.3623%" y="213" width="0.0946%" height="15" fill="rgb(221,5,38)" fg:x="72" fg:w="5"/><text x="1.6123%" y="223.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="4.3519%" y="165" width="0.0189%" height="15" fill="rgb(247,18,42)" fg:x="230" fg:w="1"/><text x="4.6019%" y="175.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (28 samples, 0.53%)</title><rect x="8.4768%" y="133" width="0.5298%" height="15" fill="rgb(241,131,45)" fg:x="448" fg:w="28"/><text x="8.7268%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (174 samples, 3.29%)</title><rect x="5.9413%" y="149" width="3.2923%" height="15" fill="rgb(249,31,29)" fg:x="314" fg:w="174"/><text x="6.1913%" y="159.50">rus..</text></g><g><title>rustaceans_brc_week2`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (12 samples, 0.23%)</title><rect x="9.0066%" y="133" width="0.2271%" height="15" fill="rgb(225,111,53)" fg:x="476" fg:w="12"/><text x="9.2566%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (258 samples, 4.88%)</title><rect x="4.3709%" y="165" width="4.8817%" height="15" fill="rgb(238,160,17)" fg:x="231" fg:w="258"/><text x="4.6209%" y="175.50">rustac..</text></g><g><title>rustaceans_brc_week2`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (1 samples, 0.02%)</title><rect x="9.2337%" y="149" width="0.0189%" height="15" fill="rgb(214,148,48)" fg:x="488" fg:w="1"/><text x="9.4837%" y="159.50"></text></g><g><title>rustaceans_brc_week2`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (18 samples, 0.34%)</title><rect x="10.9366%" y="133" width="0.3406%" height="15" fill="rgb(232,36,49)" fg:x="578" fg:w="18"/><text x="11.1866%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (156 samples, 2.95%)</title><rect x="9.2526%" y="165" width="2.9518%" height="15" fill="rgb(209,103,24)" fg:x="489" fg:w="156"/><text x="9.5026%" y="175.50">rus..</text></g><g><title>rustaceans_brc_week2`core::cmp::min_by (127 samples, 2.40%)</title><rect x="9.8013%" y="149" width="2.4030%" height="15" fill="rgb(229,88,8)" fg:x="518" fg:w="127"/><text x="10.0513%" y="159.50">ru..</text></g><g><title>rustaceans_brc_week2`core::ops::function::FnOnce::call_once (49 samples, 0.93%)</title><rect x="11.2772%" y="133" width="0.9272%" height="15" fill="rgb(213,181,19)" fg:x="596" fg:w="49"/><text x="11.5272%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (52 samples, 0.98%)</title><rect x="16.8212%" y="117" width="0.9839%" height="15" fill="rgb(254,191,54)" fg:x="889" fg:w="52"/><text x="17.0712%" y="127.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (203 samples, 3.84%)</title><rect x="14.3425%" y="133" width="3.8411%" height="15" fill="rgb(241,83,37)" fg:x="758" fg:w="203"/><text x="14.5925%" y="143.50">rust..</text></g><g><title>rustaceans_brc_week2`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (20 samples, 0.38%)</title><rect x="17.8051%" y="117" width="0.3784%" height="15" fill="rgb(233,36,39)" fg:x="941" fg:w="20"/><text x="18.0551%" y="127.50"></text></g><g><title>rustaceans_brc_week2`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (2 samples, 0.04%)</title><rect x="18.1835%" y="133" width="0.0378%" height="15" fill="rgb(226,3,54)" fg:x="961" fg:w="2"/><text x="18.4335%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (340 samples, 6.43%)</title><rect x="12.2044%" y="165" width="6.4333%" height="15" fill="rgb(245,192,40)" fg:x="645" fg:w="340"/><text x="12.4544%" y="175.50">rustacea..</text></g><g><title>rustaceans_brc_week2`std::io::buffered::bufreader::buffer::Buffer::fill_buf (322 samples, 6.09%)</title><rect x="12.5449%" y="149" width="6.0927%" height="15" fill="rgb(238,167,29)" fg:x="663" fg:w="322"/><text x="12.7949%" y="159.50">rustacea..</text></g><g><title>rustaceans_brc_week2`std::io::impls::_&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (22 samples, 0.42%)</title><rect x="18.2214%" y="133" width="0.4163%" height="15" fill="rgb(232,182,51)" fg:x="963" fg:w="22"/><text x="18.4714%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (22 samples, 0.42%)</title><rect x="18.2214%" y="117" width="0.4163%" height="15" fill="rgb(231,60,39)" fg:x="963" fg:w="22"/><text x="18.4714%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 1.25%)</title><rect x="20.9839%" y="133" width="1.2488%" height="15" fill="rgb(208,69,12)" fg:x="1109" fg:w="66"/><text x="21.2339%" y="143.50"></text></g><g><title>rustaceans_brc_week2`DYLD-STUB$$memcpy (7 samples, 0.13%)</title><rect x="22.2327%" y="133" width="0.1325%" height="15" fill="rgb(235,93,37)" fg:x="1175" fg:w="7"/><text x="22.4827%" y="143.50"></text></g><g><title>rustaceans_brc_week2`alloc::vec::Vec&lt;T,A&gt;::reserve (44 samples, 0.83%)</title><rect x="23.6897%" y="117" width="0.8325%" height="15" fill="rgb(213,116,39)" fg:x="1252" fg:w="44"/><text x="23.9397%" y="127.50"></text></g><g><title>rustaceans_brc_week2`alloc::vec::Vec&lt;T,A&gt;::append_elements (411 samples, 7.78%)</title><rect x="22.3652%" y="133" width="7.7767%" height="15" fill="rgb(222,207,29)" fg:x="1182" fg:w="411"/><text x="22.6152%" y="143.50">rustaceans_..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (297 samples, 5.62%)</title><rect x="24.5222%" y="117" width="5.6197%" height="15" fill="rgb(206,96,30)" fg:x="1296" fg:w="297"/><text x="24.7722%" y="127.50">rustace..</text></g><g><title>rustaceans_brc_week2`core::ub_checks::is_nonoverlapping::runtime (184 samples, 3.48%)</title><rect x="26.6604%" y="101" width="3.4816%" height="15" fill="rgb(218,138,4)" fg:x="1409" fg:w="184"/><text x="26.9104%" y="111.50">rus..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.02%)</title><rect x="30.1419%" y="133" width="0.0189%" height="15" fill="rgb(250,191,14)" fg:x="1593" fg:w="1"/><text x="30.3919%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr (118 samples, 2.23%)</title><rect x="30.1608%" y="133" width="2.2327%" height="15" fill="rgb(239,60,40)" fg:x="1594" fg:w="118"/><text x="30.4108%" y="143.50">r..</text></g><g><title>rustaceans_brc_week2`core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (15 samples, 0.28%)</title><rect x="32.1097%" y="117" width="0.2838%" height="15" fill="rgb(206,27,48)" fg:x="1697" fg:w="15"/><text x="32.3597%" y="127.50"></text></g><g><title>rustaceans_brc_week2`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (790 samples, 14.95%)</title><rect x="18.6377%" y="165" width="14.9480%" height="15" fill="rgb(225,35,8)" fg:x="985" fg:w="790"/><text x="18.8877%" y="175.50">rustaceans_brc_week2`al..</text></g><g><title>rustaceans_brc_week2`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (725 samples, 13.72%)</title><rect x="19.8675%" y="149" width="13.7181%" height="15" fill="rgb(250,213,24)" fg:x="1050" fg:w="725"/><text x="20.1175%" y="159.50">rustaceans_brc_week2`..</text></g><g><title>rustaceans_brc_week2`core::slice::raw::from_raw_parts::precondition_check (63 samples, 1.19%)</title><rect x="32.3936%" y="133" width="1.1921%" height="15" fill="rgb(247,123,22)" fg:x="1712" fg:w="63"/><text x="32.6436%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::slice::memchr::memchr_aligned (322 samples, 6.09%)</title><rect x="33.5856%" y="165" width="6.0927%" height="15" fill="rgb(231,138,38)" fg:x="1775" fg:w="322"/><text x="33.8356%" y="175.50">rustacea..</text></g><g><title>rustaceans_brc_week2`std::io::BufRead::read_until (1,995 samples, 37.75%)</title><rect x="2.2138%" y="197" width="37.7483%" height="15" fill="rgb(231,145,46)" fg:x="117" fg:w="1995"/><text x="2.4638%" y="207.50">rustaceans_brc_week2`std::io::BufRead::read_until</text></g><g><title>rustaceans_brc_week2`std::io::read_until (1,973 samples, 37.33%)</title><rect x="2.6301%" y="181" width="37.3321%" height="15" fill="rgb(251,118,11)" fg:x="139" fg:w="1973"/><text x="2.8801%" y="191.50">rustaceans_brc_week2`std::io::read_until</text></g><g><title>rustaceans_brc_week2`std::io::buffered::bufreader::buffer::Buffer::fill_buf (15 samples, 0.28%)</title><rect x="39.6783%" y="165" width="0.2838%" height="15" fill="rgb(217,147,25)" fg:x="2097" fg:w="15"/><text x="39.9283%" y="175.50"></text></g><g><title>rustaceans_brc_week2`rustaceans_brc_week2::read_line (2,042 samples, 38.64%)</title><rect x="1.4570%" y="213" width="38.6377%" height="15" fill="rgb(247,81,37)" fg:x="77" fg:w="2042"/><text x="1.7070%" y="223.50">rustaceans_brc_week2`rustaceans_brc_week2::read_line</text></g><g><title>rustaceans_brc_week2`std::io::read_until (7 samples, 0.13%)</title><rect x="39.9622%" y="197" width="0.1325%" height="15" fill="rgb(209,12,38)" fg:x="2112" fg:w="7"/><text x="40.2122%" y="207.50"></text></g><g><title>rustaceans_brc_week2`core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="40.8325%" y="181" width="0.0568%" height="15" fill="rgb(227,1,9)" fg:x="2158" fg:w="3"/><text x="41.0825%" y="191.50"></text></g><g><title>rustaceans_brc_week2`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.04%)</title><rect x="41.2488%" y="165" width="0.0378%" height="15" fill="rgb(248,47,43)" fg:x="2180" fg:w="2"/><text x="41.4988%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.70%)</title><rect x="41.7975%" y="149" width="0.7001%" height="15" fill="rgb(221,10,30)" fg:x="2209" fg:w="37"/><text x="42.0475%" y="159.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (29 samples, 0.55%)</title><rect x="42.6301%" y="133" width="0.5487%" height="15" fill="rgb(210,229,1)" fg:x="2253" fg:w="29"/><text x="42.8801%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (147 samples, 2.78%)</title><rect x="43.1788%" y="133" width="2.7815%" height="15" fill="rgb(222,148,37)" fg:x="2282" fg:w="147"/><text x="43.4288%" y="143.50">ru..</text></g><g><title>rustaceans_brc_week2`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (559 samples, 10.58%)</title><rect x="42.4976%" y="149" width="10.5771%" height="15" fill="rgb(234,67,33)" fg:x="2246" fg:w="559"/><text x="42.7476%" y="159.50">rustaceans_brc_..</text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (376 samples, 7.11%)</title><rect x="45.9603%" y="133" width="7.1145%" height="15" fill="rgb(247,98,35)" fg:x="2429" fg:w="376"/><text x="46.2103%" y="143.50">rustaceans..</text></g><g><title>rustaceans_brc_week2`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (91 samples, 1.72%)</title><rect x="53.0747%" y="149" width="1.7219%" height="15" fill="rgb(247,138,52)" fg:x="2805" fg:w="91"/><text x="53.3247%" y="159.50"></text></g><g><title>rustaceans_brc_week2`DYLD-STUB$$memcpy (13 samples, 0.25%)</title><rect x="54.7966%" y="149" width="0.2460%" height="15" fill="rgb(213,79,30)" fg:x="2896" fg:w="13"/><text x="55.0466%" y="159.50"></text></g><g><title>rustaceans_brc_week2`core::hash::sip::u8to64_le (31 samples, 0.59%)</title><rect x="59.6783%" y="53" width="0.5866%" height="15" fill="rgb(246,177,23)" fg:x="3154" fg:w="31"/><text x="59.9283%" y="63.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (262 samples, 4.96%)</title><rect x="57.0482%" y="69" width="4.9574%" height="15" fill="rgb(230,62,27)" fg:x="3015" fg:w="262"/><text x="57.2982%" y="79.50">rustac..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (92 samples, 1.74%)</title><rect x="60.2649%" y="53" width="1.7408%" height="15" fill="rgb(216,154,8)" fg:x="3185" fg:w="92"/><text x="60.5149%" y="63.50"></text></g><g><title>rustaceans_brc_week2`core::ub_checks::is_nonoverlapping::runtime (54 samples, 1.02%)</title><rect x="60.9839%" y="37" width="1.0218%" height="15" fill="rgb(244,35,45)" fg:x="3223" fg:w="54"/><text x="61.2339%" y="47.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (97 samples, 1.84%)</title><rect x="62.0057%" y="69" width="1.8354%" height="15" fill="rgb(251,115,12)" fg:x="3277" fg:w="97"/><text x="62.2557%" y="79.50">r..</text></g><g><title>rustaceans_brc_week2`core::hash::Hasher::write_length_prefix (385 samples, 7.28%)</title><rect x="56.7077%" y="117" width="7.2848%" height="15" fill="rgb(240,54,50)" fg:x="2997" fg:w="385"/><text x="56.9577%" y="127.50">rustaceans..</text></g><g><title>rustaceans_brc_week2`core::hash::Hasher::write_usize (375 samples, 7.10%)</title><rect x="56.8969%" y="101" width="7.0956%" height="15" fill="rgb(233,84,52)" fg:x="3007" fg:w="375"/><text x="57.1469%" y="111.50">rustaceans..</text></g><g><title>rustaceans_brc_week2`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (370 samples, 7.00%)</title><rect x="56.9915%" y="85" width="7.0009%" height="15" fill="rgb(207,117,47)" fg:x="3012" fg:w="370"/><text x="57.2415%" y="95.50">rustacean..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (8 samples, 0.15%)</title><rect x="63.8411%" y="69" width="0.1514%" height="15" fill="rgb(249,43,39)" fg:x="3374" fg:w="8"/><text x="64.0911%" y="79.50"></text></g><g><title>rustaceans_brc_week2`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.08%)</title><rect x="70.3690%" y="53" width="0.0757%" height="15" fill="rgb(209,38,44)" fg:x="3719" fg:w="4"/><text x="70.6190%" y="63.50"></text></g><g><title>rustaceans_brc_week2`core::hash::sip::u8to64_le (250 samples, 4.73%)</title><rect x="67.0577%" y="69" width="4.7304%" height="15" fill="rgb(236,212,23)" fg:x="3544" fg:w="250"/><text x="67.3077%" y="79.50">rustac..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (71 samples, 1.34%)</title><rect x="70.4447%" y="53" width="1.3434%" height="15" fill="rgb(242,79,21)" fg:x="3723" fg:w="71"/><text x="70.6947%" y="63.50"></text></g><g><title>rustaceans_brc_week2`core::ub_checks::is_nonoverlapping::runtime (45 samples, 0.85%)</title><rect x="70.9366%" y="37" width="0.8515%" height="15" fill="rgb(211,96,35)" fg:x="3749" fg:w="45"/><text x="71.1866%" y="47.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (450 samples, 8.51%)</title><rect x="64.6168%" y="85" width="8.5147%" height="15" fill="rgb(253,215,40)" fg:x="3415" fg:w="450"/><text x="64.8668%" y="95.50">rustaceans_b..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (71 samples, 1.34%)</title><rect x="71.7881%" y="69" width="1.3434%" height="15" fill="rgb(211,81,21)" fg:x="3794" fg:w="71"/><text x="72.0381%" y="79.50"></text></g><g><title>rustaceans_brc_week2`core::ub_checks::is_nonoverlapping::runtime (42 samples, 0.79%)</title><rect x="72.3368%" y="53" width="0.7947%" height="15" fill="rgb(208,190,38)" fg:x="3823" fg:w="42"/><text x="72.5868%" y="63.50"></text></g><g><title>rustaceans_brc_week2`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (73 samples, 1.38%)</title><rect x="73.1315%" y="85" width="1.3813%" height="15" fill="rgb(235,213,38)" fg:x="3865" fg:w="73"/><text x="73.3815%" y="95.50"></text></g><g><title>rustaceans_brc_week2`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (534 samples, 10.10%)</title><rect x="64.4655%" y="101" width="10.1041%" height="15" fill="rgb(237,122,38)" fg:x="3407" fg:w="534"/><text x="64.7155%" y="111.50">rustaceans_brc_..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.06%)</title><rect x="74.5128%" y="85" width="0.0568%" height="15" fill="rgb(244,218,35)" fg:x="3938" fg:w="3"/><text x="74.7628%" y="95.50"></text></g><g><title>rustaceans_brc_week2`core::hash::impls::_&lt;impl core::hash::Hash for u8&gt;::hash_slice (583 samples, 11.03%)</title><rect x="63.9924%" y="117" width="11.0312%" height="15" fill="rgb(240,68,47)" fg:x="3382" fg:w="583"/><text x="64.2424%" y="127.50">rustaceans_brc_w..</text></g><g><title>rustaceans_brc_week2`core::slice::raw::from_raw_parts::precondition_check (24 samples, 0.45%)</title><rect x="74.5695%" y="101" width="0.4541%" height="15" fill="rgb(210,16,53)" fg:x="3941" fg:w="24"/><text x="74.8195%" y="111.50"></text></g><g><title>rustaceans_brc_week2`core::hash::BuildHasher::hash_one (1,833 samples, 34.68%)</title><rect x="41.2867%" y="165" width="34.6831%" height="15" fill="rgb(235,124,12)" fg:x="2182" fg:w="1833"/><text x="41.5367%" y="175.50">rustaceans_brc_week2`core::hash::BuildHasher::hash_one</text></g><g><title>rustaceans_brc_week2`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,106 samples, 20.93%)</title><rect x="55.0426%" y="149" width="20.9272%" height="15" fill="rgb(224,169,11)" fg:x="2909" fg:w="1106"/><text x="55.2926%" y="159.50">rustaceans_brc_week2`core::hash::..</text></g><g><title>rustaceans_brc_week2`&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1,101 samples, 20.83%)</title><rect x="55.1372%" y="133" width="20.8325%" height="15" fill="rgb(250,166,2)" fg:x="2914" fg:w="1101"/><text x="55.3872%" y="143.50">rustaceans_brc_week2`&lt;alloc::vec:..</text></g><g><title>rustaceans_brc_week2`core::slice::raw::from_raw_parts::precondition_check (50 samples, 0.95%)</title><rect x="75.0237%" y="117" width="0.9461%" height="15" fill="rgb(242,216,29)" fg:x="3965" fg:w="50"/><text x="75.2737%" y="127.50"></text></g><g><title>rustaceans_brc_week2`hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.15%)</title><rect x="75.9697%" y="165" width="0.1514%" height="15" fill="rgb(230,116,27)" fg:x="4015" fg:w="8"/><text x="76.2197%" y="175.50"></text></g><g><title>rustaceans_brc_week2`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 1.29%)</title><rect x="76.7833%" y="149" width="1.2867%" height="15" fill="rgb(228,99,48)" fg:x="4058" fg:w="68"/><text x="77.0333%" y="159.50"></text></g><g><title>rustaceans_brc_week2`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (14 samples, 0.26%)</title><rect x="78.0700%" y="149" width="0.2649%" height="15" fill="rgb(253,11,6)" fg:x="4126" fg:w="14"/><text x="78.3200%" y="159.50"></text></g><g><title>rustaceans_brc_week2`core::core_arch::aarch64::neon::vld1_u8 (299 samples, 5.66%)</title><rect x="80.7758%" y="133" width="5.6575%" height="15" fill="rgb(247,143,39)" fg:x="4269" fg:w="299"/><text x="81.0258%" y="143.50">rustace..</text></g><g><title>rustaceans_brc_week2`core::ptr::read_unaligned (296 samples, 5.60%)</title><rect x="80.8325%" y="117" width="5.6008%" height="15" fill="rgb(236,97,10)" fg:x="4272" fg:w="296"/><text x="81.0825%" y="127.50">rustace..</text></g><g><title>rustaceans_brc_week2`core::intrinsics::copy_nonoverlapping::precondition_check (252 samples, 4.77%)</title><rect x="81.6651%" y="101" width="4.7682%" height="15" fill="rgb(233,208,19)" fg:x="4316" fg:w="252"/><text x="81.9151%" y="111.50">rustac..</text></g><g><title>rustaceans_brc_week2`core::ub_checks::is_nonoverlapping::runtime (123 samples, 2.33%)</title><rect x="84.1060%" y="85" width="2.3273%" height="15" fill="rgb(216,164,2)" fg:x="4445" fg:w="123"/><text x="84.3560%" y="95.50">r..</text></g><g><title>rustaceans_brc_week2`core::core_arch::arm_shared::neon::generated::vceq_u8 (2 samples, 0.04%)</title><rect x="86.4333%" y="133" width="0.0378%" height="15" fill="rgb(220,129,5)" fg:x="4568" fg:w="2"/><text x="86.6833%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (15 samples, 0.28%)</title><rect x="86.4711%" y="133" width="0.2838%" height="15" fill="rgb(242,17,10)" fg:x="4570" fg:w="15"/><text x="86.7211%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::core_arch::arm_shared::neon::vdup_n_u8 (5 samples, 0.09%)</title><rect x="86.7550%" y="133" width="0.0946%" height="15" fill="rgb(242,107,0)" fg:x="4585" fg:w="5"/><text x="87.0050%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::core_arch::arm_shared::neon::vget_lane_u64 (14 samples, 0.26%)</title><rect x="86.8496%" y="133" width="0.2649%" height="15" fill="rgb(251,28,31)" fg:x="4590" fg:w="14"/><text x="87.0996%" y="143.50"></text></g><g><title>rustaceans_brc_week2`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (30 samples, 0.57%)</title><rect x="87.1145%" y="133" width="0.5676%" height="15" fill="rgb(233,223,10)" fg:x="4604" fg:w="30"/><text x="87.3645%" y="143.50"></text></g><g><title>rustaceans_brc_week2`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.04%)</title><rect x="89.7256%" y="85" width="0.0378%" height="15" fill="rgb(215,21,27)" fg:x="4742" fg:w="2"/><text x="89.9756%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (110 samples, 2.08%)</title><rect x="90.2365%" y="69" width="2.0814%" height="15" fill="rgb(232,23,21)" fg:x="4769" fg:w="110"/><text x="90.4865%" y="79.50">l..</text></g><g><title>rustaceans_brc_week2`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (63 samples, 1.19%)</title><rect x="92.3179%" y="69" width="1.1921%" height="15" fill="rgb(244,5,23)" fg:x="4879" fg:w="63"/><text x="92.5679%" y="79.50"></text></g><g><title>rustaceans_brc_week2`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (269 samples, 5.09%)</title><rect x="93.5099%" y="69" width="5.0899%" height="15" fill="rgb(226,81,46)" fg:x="4942" fg:w="269"/><text x="93.7599%" y="79.50">rustac..</text></g><g><title>rustaceans_brc_week2`core::slice::raw::from_raw_parts::precondition_check (139 samples, 2.63%)</title><rect x="95.9697%" y="53" width="2.6301%" height="15" fill="rgb(247,70,30)" fg:x="5072" fg:w="139"/><text x="96.2197%" y="63.50">ru..</text></g><g><title>rustaceans_brc_week2`&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.17%)</title><rect x="98.5998%" y="69" width="0.1703%" height="15" fill="rgb(212,68,19)" fg:x="5211" fg:w="9"/><text x="98.8498%" y="79.50"></text></g><g><title>rustaceans_brc_week2`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (540 samples, 10.22%)</title><rect x="88.7039%" y="101" width="10.2176%" height="15" fill="rgb(240,187,13)" fg:x="4688" fg:w="540"/><text x="88.9539%" y="111.50">rustaceans_brc_..</text></g><g><title>rustaceans_brc_week2`alloc::vec::partial_eq::_&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (484 samples, 9.16%)</title><rect x="89.7635%" y="85" width="9.1580%" height="15" fill="rgb(223,113,26)" fg:x="4744" fg:w="484"/><text x="90.0135%" y="95.50">rustaceans_br..</text></g><g><title>rustaceans_brc_week2`DYLD-STUB$$memcmp (8 samples, 0.15%)</title><rect x="98.7701%" y="69" width="0.1514%" height="15" fill="rgb(206,192,2)" fg:x="5220" fg:w="8"/><text x="99.0201%" y="79.50"></text></g><g><title>rustaceans_brc_week2`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (610 samples, 11.54%)</title><rect x="87.6821%" y="133" width="11.5421%" height="15" fill="rgb(241,108,4)" fg:x="4634" fg:w="610"/><text x="87.9321%" y="143.50">rustaceans_brc_we..</text></g><g><title>rustaceans_brc_week2`hashbrown::map::equivalent_key::_{{closure}} (565 samples, 10.69%)</title><rect x="88.5336%" y="117" width="10.6906%" height="15" fill="rgb(247,173,49)" fg:x="4679" fg:w="565"/><text x="88.7836%" y="127.50">rustaceans_brc_w..</text></g><g><title>rustaceans_brc_week2`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (16 samples, 0.30%)</title><rect x="98.9215%" y="101" width="0.3027%" height="15" fill="rgb(224,114,35)" fg:x="5228" fg:w="16"/><text x="99.1715%" y="111.50"></text></g><g><title>rustaceans_brc_week2`rustaceans_brc_week2::update_stations (3,165 samples, 59.89%)</title><rect x="40.0946%" y="213" width="59.8865%" height="15" fill="rgb(245,159,27)" fg:x="2119" fg:w="3165"/><text x="40.3446%" y="223.50">rustaceans_brc_week2`rustaceans_brc_week2::update_stations</text></g><g><title>rustaceans_brc_week2`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,139 samples, 59.39%)</title><rect x="40.5866%" y="197" width="59.3945%" height="15" fill="rgb(245,172,44)" fg:x="2145" fg:w="3139"/><text x="40.8366%" y="207.50">rustaceans_brc_week2`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>rustaceans_brc_week2`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,123 samples, 59.09%)</title><rect x="40.8893%" y="181" width="59.0918%" height="15" fill="rgb(236,23,11)" fg:x="2161" fg:w="3123"/><text x="41.1393%" y="191.50">rustaceans_brc_week2`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>rustaceans_brc_week2`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,261 samples, 23.86%)</title><rect x="76.1211%" y="165" width="23.8600%" height="15" fill="rgb(205,117,38)" fg:x="4023" fg:w="1261"/><text x="76.3711%" y="175.50">rustaceans_brc_week2`hashbrown::raw::R..</text></g><g><title>rustaceans_brc_week2`hashbrown::raw::RawTable&lt;T,A&gt;::find (1,144 samples, 21.65%)</title><rect x="78.3349%" y="149" width="21.6462%" height="15" fill="rgb(237,72,25)" fg:x="4140" fg:w="1144"/><text x="78.5849%" y="159.50">rustaceans_brc_week2`hashbrown::ra..</text></g><g><title>rustaceans_brc_week2`hashbrown::raw::neon::Group::match_byte (40 samples, 0.76%)</title><rect x="99.2242%" y="133" width="0.7569%" height="15" fill="rgb(244,70,9)" fg:x="5244" fg:w="40"/><text x="99.4742%" y="143.50"></text></g><g><title>all (5,285 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="5285"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`start (5,285 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="5285"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>rustaceans_brc_week2`main (5,284 samples, 99.98%)</title><rect x="0.0189%" y="325" width="99.9811%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="335.50">rustaceans_brc_week2`main</text></g><g><title>rustaceans_brc_week2`std::rt::lang_start (5,284 samples, 99.98%)</title><rect x="0.0189%" y="309" width="99.9811%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="319.50">rustaceans_brc_week2`std::rt::lang_start</text></g><g><title>rustaceans_brc_week2`std::rt::lang_start_internal (5,284 samples, 99.98%)</title><rect x="0.0189%" y="293" width="99.9811%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="303.50">rustaceans_brc_week2`std::rt::lang_start_internal</text></g><g><title>rustaceans_brc_week2`std::rt::lang_start::_{{closure}} (5,284 samples, 99.98%)</title><rect x="0.0189%" y="277" width="99.9811%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="287.50">rustaceans_brc_week2`std::rt::lang_start::_{{closure}}</text></g><g><title>rustaceans_brc_week2`std::sys_common::backtrace::__rust_begin_short_backtrace (5,284 samples, 99.98%)</title><rect x="0.0189%" y="261" width="99.9811%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="271.50">rustaceans_brc_week2`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rustaceans_brc_week2`core::ops::function::FnOnce::call_once (5,284 samples, 99.98%)</title><rect x="0.0189%" y="245" width="99.9811%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="5284"/><text x="0.2689%" y="255.50">rustaceans_brc_week2`core::ops::function::FnOnce::call_once</text></g><g><title>rustaceans_brc_week2`rustaceans_brc_week2::main (5,256 samples, 99.45%)</title><rect x="0.5487%" y="229" width="99.4513%" height="15" fill="rgb(246,228,12)" fg:x="29" fg:w="5256"/><text x="0.7987%" y="239.50">rustaceans_brc_week2`rustaceans_brc_week2::main</text></g><g><title>rustaceans_brc_week2`std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.02%)</title><rect x="99.9811%" y="213" width="0.0189%" height="15" fill="rgb(213,55,15)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="223.50"></text></g><g><title>rustaceans_brc_week2`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.9811%" y="197" width="0.0189%" height="15" fill="rgb(209,9,3)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="207.50"></text></g><g><title>rustaceans_brc_week2`core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.9811%" y="181" width="0.0189%" height="15" fill="rgb(230,59,30)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="191.50"></text></g><g><title>rustaceans_brc_week2`std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (1 samples, 0.02%)</title><rect x="99.9811%" y="165" width="0.0189%" height="15" fill="rgb(209,121,21)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="175.50"></text></g><g><title>rustaceans_brc_week2`std::sys::thread_local::fast_local::lazy::Storage&lt;T,D&gt;::get_or_init (1 samples, 0.02%)</title><rect x="99.9811%" y="149" width="0.0189%" height="15" fill="rgb(220,109,13)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="159.50"></text></g><g><title>rustaceans_brc_week2`std::sys::thread_local::fast_local::lazy::Storage&lt;T,D&gt;::initialize (1 samples, 0.02%)</title><rect x="99.9811%" y="133" width="0.0189%" height="15" fill="rgb(232,18,1)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="143.50"></text></g><g><title>rustaceans_brc_week2`core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="99.9811%" y="117" width="0.0189%" height="15" fill="rgb(215,41,42)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="127.50"></text></g><g><title>rustaceans_brc_week2`std::hash::random::RandomState::new::KEYS::__init (1 samples, 0.02%)</title><rect x="99.9811%" y="101" width="0.0189%" height="15" fill="rgb(224,123,36)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.02%)</title><rect x="99.9811%" y="85" width="0.0189%" height="15" fill="rgb(240,125,3)" fg:x="5284" fg:w="1"/><text x="100.2311%" y="95.50"></text></g></svg></svg>